I"{;<p>在上一篇文章【<a href="/2018/10/webpack-what-in-bundle">webpack：打包后的bundle文件里到底有什么</a> 】这篇文章解释了什么是bundle文件以及bundle文件里的具体内容。
也提到过单单只是有多少个入口文件，打包出多少个bundle文件这种方式，会导致代码冗余，同一模块代码会被重复打包到不同的bundle文件中。</p>

<p>为了解决这个问题，我们需要把重复共用代码提取出来，放在单独的文件中，其他bundle有引用公用代码只需要加载这个单独文件就可以了。</p>

<p><strong>提取入口文件中公用的代码，这种行为就是代码切割，生成的独立文件就是chunk文件。</strong></p>

<p>下面就来介绍如何在 <strong>webpack3</strong> 中进行代码切割。</p>

<h2 id="commonschunkplugin">CommonsChunkPlugin</h2>

<p>在webpack3中是通过CommonsChunkPlugin实现公用代码切割，具体用法如下：</p>

<p>源码在这里：<a href="https://github.com/LiMeii/angular-seed-project">angular-seed-project</a>.</p>

<p>a 和 c 都引用了b文件代码</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//a.js</span>
<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./b.js</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">this is a.js file</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">b</span><span class="p">.</span><span class="nx">b</span><span class="p">();</span>
</code></pre></div></div>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//b.js</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">this is b.js file</span><span class="dl">'</span><span class="p">)</span>
<span class="p">};</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//c.js</span>
<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./b.js</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">this is c.js file</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">b</span><span class="p">.</span><span class="nx">b</span><span class="p">();</span>
</code></pre></div></div>

<p><strong>第一种方式，<code class="language-plaintext highlighter-rouge">new webpack.optimize.CommonsChunkPlugin({name: 'commons'})</code></strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//webpack.bundle.js</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./src/app/bundle/a.js</span><span class="dl">'</span><span class="p">,</span>
        <span class="dl">'</span><span class="s1">c</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./src/app/bundle/c.js</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">path</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="dl">'</span><span class="s1">../build-bundle</span><span class="dl">'</span><span class="p">),</span>
        <span class="na">filename</span><span class="p">:</span> <span class="dl">'</span><span class="s1">js/[name].bundle.js</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
        <span class="k">new</span> <span class="nx">CleanWebpackPlugin</span><span class="p">([</span><span class="dl">'</span><span class="s1">./build-bundle</span><span class="dl">'</span><span class="p">],</span> <span class="p">{</span> <span class="na">root</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">(),</span> <span class="dl">''</span><span class="p">)</span> <span class="p">}),</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">CommonsChunkPlugin</span><span class="p">({</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">commons</span><span class="dl">'</span> <span class="p">}),</span>
    <span class="p">]</span>
<span class="p">};</span>
</code></pre></div></div>
<p>最后生成三个bundle文件：a.bundle.js、c.bundle.js、commons.bundle.js，具体代码如下：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//a.bundle.js</span>
<span class="nx">webpackJsonp</span><span class="p">([</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span>
        <span class="cm">/* 0 */</span><span class="p">,</span>
        <span class="cm">/* 1 */</span>
        <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">module</span><span class="p">,</span> <span class="nx">exports</span><span class="p">,</span> <span class="nx">__webpack_require__</span><span class="p">)</span> <span class="p">{</span>

        <span class="c1">// this is use to analyse what's in bundle file</span>

        <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">__webpack_require__</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">this is a.js file</span><span class="dl">'</span><span class="p">);</span>

        <span class="nx">b</span><span class="p">.</span><span class="nx">b</span><span class="p">();</span>
<span class="p">})</span>
<span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</code></pre></div></div>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//c.bundle.js</span>
<span class="nx">webpackJsonp</span><span class="p">([</span><span class="mi">2</span><span class="p">],</span> <span class="p">{</span>
        <span class="cm">/*2*/</span>
        <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">module</span><span class="p">,</span> <span class="nx">exports</span><span class="p">,</span> <span class="nx">__webpack_require__</span><span class="p">)</span> <span class="p">{</span>

            <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">__webpack_require__</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">this is c.js file</span><span class="dl">'</span><span class="p">);</span>

            <span class="nx">b</span><span class="p">.</span><span class="nx">b</span><span class="p">();</span>
<span class="p">})</span>

<span class="p">},</span> <span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</code></pre></div></div>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//commons.bundle.js</span>
<span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">modules</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// webpackBootstrap</span>
    <span class="c1">//在这里省略了webpack生成的代码</span>
<span class="p">})</span>
<span class="p">([</span>
    <span class="cm">/* 0 */</span>
    <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">module</span><span class="p">,</span> <span class="nx">exports</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// this is use to analyse what's in bundle file</span>
            <span class="nx">exports</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">this is b.js file</span><span class="dl">'</span><span class="p">)</span>
            <span class="p">};</span>
        <span class="p">})</span>
<span class="p">]);</span>
</code></pre></div></div>

<p>从上面代码可以看出，common.bundle.js里面包含了b.js的代码并且module id 为0，a.bunlde.js c.bundle.js文件分别通过module id对b文件实现了加载。</p>

<blockquote>
<p>
CommonsChunkPlugin定义了公用代码需要放到commons.bundle.js文件中，在webpack打包过程中，发现没有commons这个bundle文件，会新创建这个文件，并且把入口文件a.js和c.j这个文件中共用代码（b.js）抽取出来放到commons.bundle.js文件中。a 和 c budnle文件中只保留自己的代码。
</p>
</blockquote>

<p><strong>第二种方式，<code class="language-plaintext highlighter-rouge">new webpack.optimize.CommonsChunkPlugin({ name: 'c' })</code></strong></p>

<p>我们把commons换成c，最后生成两个bundle文件 a.bunlde.js、c.bundle.js</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//a.bundle.js</span>
<span class="nx">webpackJsonp</span><span class="p">([</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span>
        <span class="cm">/* 0 */</span>
        <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">module</span><span class="p">,</span> <span class="nx">exports</span><span class="p">,</span> <span class="nx">__webpack_require__</span><span class="p">)</span> <span class="p">{</span>

        <span class="c1">// this is use to analyse what's in bundle file</span>

        <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">__webpack_require__</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">this is a.js file</span><span class="dl">'</span><span class="p">);</span>

        <span class="nx">b</span><span class="p">.</span><span class="nx">b</span><span class="p">();</span>
<span class="p">})</span>
<span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//c.bundle.js</span>
<span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">modules</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// webpackBootstrap</span>
    <span class="c1">// 这里省略webpack生成的代码</span>
<span class="p">})</span>
    <span class="p">([</span>
        <span class="cm">/* 0 */</span>
        <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">module</span><span class="p">,</span> <span class="nx">exports</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// this is use to analyse what's in bundle file</span>
            <span class="nx">exports</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">this is b.js file</span><span class="dl">'</span><span class="p">)</span>
            <span class="p">};</span>
        <span class="p">}),</span>
        <span class="cm">/* 2 */</span>
        <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">module</span><span class="p">,</span> <span class="nx">exports</span><span class="p">,</span> <span class="nx">__webpack_require__</span><span class="p">)</span> <span class="p">{</span>

            <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">__webpack_require__</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">this is c.js file</span><span class="dl">'</span><span class="p">);</span>

            <span class="nx">b</span><span class="p">.</span><span class="nx">b</span><span class="p">();</span>

        <span class="p">})</span>
    <span class="p">]);</span>
</code></pre></div></div>
<p>从上面的bundle文件代码可以看出，公用代码模块（b.js）被放到 c.bundle 文件中了。</p>

<blockquote>
<p>
CommonsChunkPlugin定义了公用代码需要放到c.bundle.js文件中，在webpack打包过程中，发现已经有c.bundle.js文件，会把入口文件a.js和c.j这个文件中共用代码（b.js）抽取出来放到c.bundle.js文件中。a.budnle文件中只保留自己的代码。
</p>
</blockquote>

<p>关于CommonsChunkPlugin其他属性的应用可以参考 <a href="https://webpack.js.org/plugins/commons-chunk-plugin/">webpack 代码切割官方文档</a></p>
:ET