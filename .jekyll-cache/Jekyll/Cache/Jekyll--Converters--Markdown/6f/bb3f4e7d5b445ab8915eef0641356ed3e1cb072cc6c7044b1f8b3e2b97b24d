I"gF<p>在 <a href="/2018/10/webpack-caching">webpack：如何解决浏览器缓存问题</a> 文章里介绍了用<code class="language-plaintext highlighter-rouge">chunkhash</code>解决浏览器缓存问题，在那篇文章里默认把CSS文件一起打包进JS bundle文件中。</p>

<p>但在一般项目里面CSS的改动比较少，如果打包成JS bundle文件，再结合<code class="language-plaintext highlighter-rouge">chunkhash</code>，每次发布以后，虽然CSS文件没有改动，但是客户端还是需要重新下载这些样式文件。如果CSS文件过大的话，在一定程度上会影响性能。</p>

<p>接下来就介绍，如何在打包过程不把CSS 内联打包到JS bundle文件，而是直接提取生成单独的CSS文件，如果项目中CSS有更改，提出生成的CSS文件名也会带上不同的hashcode。</p>

<h2 id="extract-text-webpack-plugin">extract-text-webpack-plugin</h2>

<p>在webpack中，是用 <a href="https://github.com/webpack-contrib/extract-text-webpack-plugin">extract-text-webpack-plugin</a> 这个plugin把样式提出成单独的css文件。</p>

<blockquote>
<p>
需要注意的是：
</p>
<p>
webpack3 提取 css 的 plugin 是 extract-text-webpack-plugin
</p>
<p>
webpack4 提取 css 的 plugin 是 mini-css-extract-plugin
</p>
<p>
这篇文章是基于 webpack3.10.0
</p>
</blockquote>

<p>具体用法如下：</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">ExtractTextPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">extract-text-webpack-plugin</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span>
        <span class="na">use</span><span class="p">:</span> <span class="nx">ExtractTextPlugin</span><span class="p">.</span><span class="nx">extract</span><span class="p">({</span>
          <span class="na">fallback</span><span class="p">:</span> <span class="dl">"</span><span class="s2">style-loader</span><span class="dl">"</span><span class="p">,</span>
          <span class="na">use</span><span class="p">:</span> <span class="dl">"</span><span class="s2">css-loader</span><span class="dl">"</span>
        <span class="p">})</span>
      <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">},</span>
  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
    <span class="k">new</span> <span class="nx">ExtractTextPlugin</span><span class="p">(</span><span class="dl">"</span><span class="s2">styles.css</span><span class="dl">"</span><span class="p">),</span>
  <span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="第一种方式extracttextplugin-和-hash-结合使用">第一种方式：ExtractTextPlugin 和 hash 结合使用</h3>

<p>示例代码：<a href="https://github.com/LiMeii/angular-seed-project">angular-seed-project</a></p>

<p>完整webpack代码 <a href="https://github.com/LiMeii/angular-seed-project/blob/master/webpack/webpack.bundle.js">webpack.bundle.js</a></p>

<p><strong>两个js文件：</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// css-extract-a.js，引用 a.css</span>
<span class="c1">// webpack build: extract css into .css file, no longer bundle into .js file</span>

<span class="k">import</span> <span class="nx">aStyle</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../../assets/a.css</span><span class="dl">'</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">this is a extract css file</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//css-extract-b.js, 引用 b.css</span>
<span class="c1">// webpack build: extract css into .css file, no longer bundle into .js file</span>

<span class="k">import</span> <span class="nx">bStyle</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../../assets/b.css</span><span class="dl">'</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">this is b extract css file</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<p><strong>两个 css 文件：</strong></p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/**a.css**/</span>
<span class="nt">html</span> <span class="p">{</span>
    <span class="nl">font-size</span><span class="p">:</span> <span class="m">1em</span><span class="p">;</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/**b.css**/</span>
<span class="nt">html</span> <span class="p">{</span>
    <span class="nl">font-size</span><span class="p">:</span> <span class="m">2em</span><span class="p">;</span>
    <span class="nl">color</span><span class="p">:</span><span class="no">blue</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>webpack.bundle.js 文件如下：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nx">entry</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">'</span><span class="s1">extract-a</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./src/app/bundle/css-extract-a.js</span><span class="dl">'</span><span class="p">,</span>
        <span class="dl">'</span><span class="s1">extract-b</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./src/app/bundle/css-extract-b.js</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="nx">output</span><span class="p">:</span> <span class="p">{</span>
        <span class="nl">path</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="dl">'</span><span class="s1">../build-bundle</span><span class="dl">'</span><span class="p">),</span>
        <span class="nx">filename</span><span class="p">:</span> <span class="dl">'</span><span class="s1"> [name].[hash].bundle.js</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="nx">module</span><span class="p">:</span> <span class="p">{</span>
        <span class="nl">rules</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span>
                <span class="na">use</span><span class="p">:</span> <span class="nx">ExtractTextPlugin</span><span class="p">.</span><span class="nx">extract</span><span class="p">({</span>
                    <span class="na">fallback</span><span class="p">:</span> <span class="dl">'</span><span class="s1">style-loader</span><span class="dl">'</span><span class="p">,</span>
                    <span class="na">use</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">css-loader?minimize</span><span class="dl">'</span><span class="p">]</span>
                <span class="p">})</span>
            <span class="p">}</span>

        <span class="p">]</span>
    <span class="p">},</span>
    <span class="nx">plugins</span><span class="p">:</span> <span class="p">[</span>
        <span class="k">new</span> <span class="nx">CleanWebpackPlugin</span><span class="p">([</span><span class="dl">'</span><span class="s1">./build-bundle</span><span class="dl">'</span><span class="p">],</span> <span class="p">{</span> <span class="na">root</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">(),</span> <span class="dl">''</span><span class="p">)</span> <span class="p">}),</span>
        <span class="k">new</span> <span class="nx">ExtractTextPlugin</span><span class="p">(</span><span class="dl">'</span><span class="s1">[name]-[hash].css</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">]</span>
</code></pre></div></div>
<p>编译结果如下：</p>

<p><img src="https://limeii.github.io/assets/images/posts/webpack/webpack-css-extract-hash.png" alt="webpack-css-extract-hash.png" height="100%" width="100%" /></p>

<p>我们可以看到，生成了四个文件。两个.js bundle文件，两个.css文件，我们可以看到文件名中的hashcode完全一样。这个会导致每次发布，不管文件改没改,都会build成不一样的文件名，导致客户端重新下载所有文件，这个并不是我们想要的。</p>

<h3 id="第二种方式extracttextplugin-和-chunkhash-结合使用">第二种方式，ExtractTextPlugin 和 chunkhash 结合使用</h3>

<p>在 <a href="/2018/10/webpack-caching">如何利用 webpack 解决浏览器缓存问题</a> 文章中提到<code class="language-plaintext highlighter-rouge">chunkhash</code>可以根据源文件内容的改变，来决定最终bundle文件名是否需要更改，而且每个chunk文件中的hashcode都不一样。</p>

<p>webpack.bundle.js 文件如下：</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nx">entry</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">'</span><span class="s1">extract-a</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./src/app/bundle/css-extract-a.js</span><span class="dl">'</span><span class="p">,</span>
        <span class="dl">'</span><span class="s1">extract-b</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./src/app/bundle/css-extract-b.js</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="nx">output</span><span class="p">:</span> <span class="p">{</span>
        <span class="nl">path</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="dl">'</span><span class="s1">../build-bundle</span><span class="dl">'</span><span class="p">),</span>
        <span class="nx">filename</span><span class="p">:</span> <span class="dl">'</span><span class="s1"> [name].[chunkhash].bundle.js</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="nx">module</span><span class="p">:</span> <span class="p">{</span>
        <span class="nl">rules</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span>
                <span class="na">use</span><span class="p">:</span> <span class="nx">ExtractTextPlugin</span><span class="p">.</span><span class="nx">extract</span><span class="p">({</span>
                    <span class="na">fallback</span><span class="p">:</span> <span class="dl">'</span><span class="s1">style-loader</span><span class="dl">'</span><span class="p">,</span>
                    <span class="na">use</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">css-loader?minimize</span><span class="dl">'</span><span class="p">]</span>
                <span class="p">})</span>
            <span class="p">}</span>

        <span class="p">]</span>
    <span class="p">},</span>
    <span class="nx">plugins</span><span class="p">:</span> <span class="p">[</span>
        <span class="k">new</span> <span class="nx">CleanWebpackPlugin</span><span class="p">([</span><span class="dl">'</span><span class="s1">./build-bundle</span><span class="dl">'</span><span class="p">],</span> <span class="p">{</span> <span class="na">root</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">(),</span> <span class="dl">''</span><span class="p">)</span> <span class="p">}),</span>
        <span class="k">new</span> <span class="nx">ExtractTextPlugin</span><span class="p">(</span><span class="dl">'</span><span class="s1">[name]-[chunkhash].css</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">]</span>
</code></pre></div></div>
<p>编译结果如下：</p>

<p><img src="https://limeii.github.io/assets/images/posts/webpack/webpack-css-extract-chunkhash.png" alt="webpack-css-extract-chunkhash.png" height="100%" width="100%" /></p>

<p>从上面的截图我们可以看到，入口文件对应的bundle文件hashcode是不一样的，这个好理解，因为用到了chunkhash。但是对应引用的css中的hashcode也跟bundle文件名一样。</p>

<p>总觉得不对劲，我们来尝试改下 a.css文件内容：</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">html</span> <span class="p">{</span>
    <span class="nl">font-size</span><span class="p">:</span> <span class="m">1em</span><span class="p">;</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span>
    <span class="nl">line-height</span><span class="p">:</span> <span class="m">1em</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>重新编译以后的结果：</p>

<p><img src="https://limeii.github.io/assets/images/posts/webpack/webpack-css-extract-chunkhash2.png" alt="webpack-css-extract-chunkhash2.png" height="100%" width="100%" /></p>

<p>从上面截图可以看到，虽然a.css文件改过了，但是最后编译结果文件跟上一次没有任何区别。也就是说发布以后，客户端在缓存没过期的前提下，还是看不到更改以后的样式，显然这也不是我们想要的。</p>

<p><strong>为什么会有这样的结果？</strong>仔细想一下，chunkhash 是基于入口文件来计算hashcode的，入口文件没有改动，那么最终的hashcode也不会改变。</p>

<p><strong>我们想要的编译结果是：</strong>所有文件（.bundle.js/ .css）的hashcode都应该是独一无二的，并且不管是入口文件还是从他们提取的CSS文件有改动的话，那么对应的编译文件的hashcode也要跟着改变。</p>

<h3 id="第三种方式extracttextpluginchunkhash和contenthash结合使用">第三种方式，ExtractTextPlugin，chunkhash和contenthash结合使用</h3>

<pre><code class="language-contenthash```就可以用来解决上面css文件的hashcode不改变的问题。">webpack.bundle.js 文件如下：
```js
    entry: {
        'extract-a': './src/app/bundle/css-extract-a.js',
        'extract-b': './src/app/bundle/css-extract-b.js'
    },
    output: {
        path: path.join(__dirname, '../build-bundle'),
        filename: ' [name].[chunkhash].bundle.js'
    },
    module: {
        rules: [
            {
                test: /\.css$/,
                use: ExtractTextPlugin.extract({
                    fallback: 'style-loader',
                    use: ['css-loader?minimize']
                })
            }

        ]
    },
    plugins: [
        new CleanWebpackPlugin(['./build-bundle'], { root: path.join(process.cwd(), '') }),
        new ExtractTextPlugin('[name]-[contenthash].css')
    ]
</code></pre>
<p>编译结果如下：
<img src="https://limeii.github.io/assets/images/posts/webpack/webpack-css-extract-contenthash.png" alt="webpack-css-extract-contenthash.png" height="100%" width="100%" /></p>

<p>从上面的编辑结果中可以看到，所有文件的hashcode都不一样，而且任一文件有改动，编译以后，对应文件的hashcode也会发生改变。</p>

<p>这就完美解决了我们的缓存问题！!</p>

<h2 id="hash-chunkhash-contenthash三者的区别">hash chunkhash contenthash三者的区别</h2>

<p>最后来总结一下 hash chunkhash contenthash 这三者之间的区别。</p>

<ol>
  <li>
    <p>hash 是用来给本次build计算hashcode，所有的编译结果文件中的hashcode都会一样。</p>
  </li>
  <li>
    <p>chunkhash 是用来给每个entry file计算hashcode，每个编译结果文件中的hashcode都是独一无二的。而且entry file任一文件改动，对应的bundle文件hashcode也会改动，否则就保持不变。</p>
  </li>
  <li>
    <p>contenthash 是用来给ExtractTextPlugin提取的文件内容计算hashcode，注意只是基于提取内容，而不是整个chunk文件。</p>
  </li>
</ol>
:ET