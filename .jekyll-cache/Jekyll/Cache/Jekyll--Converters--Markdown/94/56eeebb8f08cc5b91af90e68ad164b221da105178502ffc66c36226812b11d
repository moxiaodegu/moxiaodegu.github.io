I"D <h2 id="angular-cli">angular-cli</h2>
<p>按照<a href="https://angular.io/tutorial">Angular官方教程</a>搭建一个 Angular 项目，默认都是先安装 angula-cli，再用命令行<code class="language-plaintext highlighter-rouge">ng new angular-project-name</code>会自动生成一个符合 angular best practice 的项目， 如下所示：</p>

<p><img src="https://limeii.github.io/assets/images/posts/angular/angular-seed-project.png" alt="angular seed project" height="100%" width="100%" /></p>

<p>源码可以在 <a href="https://github.com/LiMeii/angular-seed-project">angular-seed-project</a> 查看。</p>

<blockquote>
<p>
本文中的示例代码用的 angular-cli 的版本是 1.6.0，angular 是5.0.0
</p>
</blockquote>
<p>然后直接跑<code class="language-plaintext highlighter-rouge">ng serve</code>就把项目跑起来了，用 angluar-cli 是不是很方便直接，对初学者也很友好，这个过程中都不需要配置 webpack。</p>

<p>其实 angular-cli 打包这一块的代码，里面源码用的也是 webpack，为了降低初学者的学习曲线，angular 把 webpack 内置了，默认用 cli 创建的项目里是没有把 webpack.config 文件暴露给开发者，不让开发改 webpack 配置代码，也就是说不能加我们想要用的 plugin loader，也不能更改 bunlde 文件命名和优化 bundle 文件大小等等。</p>

<p>如果需要写自己的 webpack，官方提供了<code class="language-plaintext highlighter-rouge">ng eject</code>这个命令，把 webpack.config 文件暴露出来，一旦 eject 就不能再用 angular-cli，编译打包就完全让开发自己控制。</p>

<h2 id="ng-eject">ng eject</h2>

<p>首先在 terminal 里执行<code class="language-plaintext highlighter-rouge">ng eject</code></p>

<p><img src="https://limeii.github.io/assets/images/posts/angular/angular-seedproject-eject.png" alt="angular eject" height="100%" width="100%" /></p>

<blockquote>
<p>
需要注意的是 Angular6 以上版本目前不支持```ng eject```。
```ng eject```以后就不能再用 ng 的命令了，需要在 package.json 中的 script 配置你自己的命令。
</p>
</blockquote>

<p>执行 eject 命令以后，会在根目录下新加 webpack.config.js 文件，这个是 angular-cli 默认的一个 webpack 配置，大致的内容如下：</p>

<p><img src="https://limeii.github.io/assets/images/posts/angular/angular-default-webpack.png" alt="angular default webpack" height="100%" width="100%" /></p>

<p>接下来就教你如何在 angular 中搭建你自己的 webpack 打包方式。</p>

<h2 id="如何在angular中配置webpack">如何在angular中配置webpack</h2>

<p><strong>第一步，在src目录下新增一个vendor.ts文件，这个文件主要是用来引用第三方library，比如node_modules下面的library</strong></p>

<p>在 vendor 文件里 improt 第三方 library 默认是从 node_modules 目录下找，所以如果是 node_modules 里面的 library，那么 node_modules 之前的路径都可以省略</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//vendor.ts</span>
<span class="c1">// Angular 2</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">@angular/platform-browser</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">@angular/platform-browser-dynamic</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">@angular/core</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">@angular/common</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">@angular/http</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">@angular/router</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">@angular/forms</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">// RxJS</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">rxjs/Rx</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>第二步，更改webpack.config.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">env</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">env</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">require</span><span class="p">(</span><span class="s2">`./webpack.</span><span class="p">${</span><span class="nx">env</span><span class="p">}</span><span class="s2">.js`</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>第三步，创建本地开发用的打包方式，在根目录下新增一个webpack.dev.js文件</strong></p>

<p>关于 webpack.dev 完整代码可以查看 <a href="https://github.com/LiMeii/angular-seed-project/blob/master/webpack/webpack.dev.js">webpack.dev.js</a></p>

<p><strong>第四步，在package.json文件script节点里增加命令</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="dl">"</span><span class="s2">scripts</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">start</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">webpack-dev-server --env=dev --hot --inline --port 3000 --open</span><span class="se">\"</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">build:dev</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">webpack --env=dev --progress --profile --colors</span><span class="dl">"</span>
  <span class="p">}</span>
</code></pre></div></div>
<p>然后在 terminal 里输入<code class="language-plaintext highlighter-rouge">rum run start</code> 能在本地把整个项目跑起来，每次改动 ts css html 文件会自动编译刷新页面，即时就能看到页面变化。</p>

<p>执行<code class="language-plaintext highlighter-rouge">npm run build:dev</code>这个命令行，会在根目录下生成 build-dev 文件目录，在这个目录下是最终开发环境下编译打包后的 bundle 文件。</p>

<p><img src="https://limeii.github.io/assets/images/posts/angular/angular-build-dev-file.png" alt="angular build dev" height="100%" width="100%" /></p>

<p><strong>第五步，创建Production的打包方式，在根目标下新增一个webpack.prod.js文件</strong></p>

<p>关于 webpack.prod 完整代码可以查看 <a href="https://github.com/LiMeii/angular-seed-project/blob/master/webpack/webpack.prod.js">webpack.prod.js</a></p>

<p>需要在 package.json 文件 script 节点下加以下命令：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="dl">"</span><span class="s2">build:prod</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">webpack --env=prod --progress --profile --colors</span><span class="dl">"</span>
</code></pre></div></div>
<p>然后在 terminal 中执行<code class="language-plaintext highlighter-rouge">npm run build:prod</code>这个命令行，在根目录节点下生成 dist 文件目录，这个目录包含最终发布到 PROD 的 bundle 文件。</p>

<p><img src="https://limeii.github.io/assets/images/posts/angular/angular-build-prod-file.png" alt="angular build prod" height="100%" width="100%" /></p>

<p>好啦，现在就把 Angular+Webpack 项目搭起来啦。</p>
:ET