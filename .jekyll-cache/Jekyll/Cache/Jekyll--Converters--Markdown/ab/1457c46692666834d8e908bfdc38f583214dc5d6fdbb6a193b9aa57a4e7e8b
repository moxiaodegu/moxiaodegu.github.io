I"f2<p>在文章【<a href="https://limeii.github.io/2018/09/angular-webpack/">Angular：如何用Angular(&lt;6.0)和Webpack搭建项目</a>】中介绍了如果在 Angular 项目中想要自己配置 webpack，那么必须用命令‘ng eject’把 Angular 内置的 webpack.config 文件暴露出来，然后根据项目需求自己重写整个 webpack.config 文件。</p>

<p>但是 Angular6.0 以上的版本，Angular 官方去掉‘ng eject’这个命令。那么 Angular6.0+ 项目中，想要根据项目需求添加或者更改 webpack 打包配置要怎么做呢？【<a href="https://github.com/just-jeb/angular-builders">angular-builders</a>】这个 lib 就是专门用来解决没有’ng eject’后怎么客户化配置项目的 webpack 打包方式。这篇文章会详细介绍在 Angular8.0 中如何用【<a href="https://github.com/just-jeb/angular-builders">angular-builders</a>】客户化配置 webpack。</p>

<p>本文中用的项目代码在这里：【<a href="https://github.com/LiMeii/angular-performance">angular-performance</a>】</p>

<h2 id="用-angular-cli-创建一个-angular8-项目">用 angular-cli 创建一个 Angular8 项目</h2>
<p>‘ng new angular-performance’创建 Angular 项目。</p>

<p>本地开发环境如下：</p>

<p><img src="https://limeii.github.io/assets/images/posts/angular/angular-customize-webpack01.png" alt="angular-customize-webpack" height="100%" width="100%" /></p>

<h2 id="安装-angular-builders">安装 angular-builders</h2>

<p>运行命令：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install @angular-builders/custom-webpack --save-dev
npm install @angular-devkit/build-angular --save-dev
</code></pre></div></div>
<p><strong>不需要单独安装 webpack 和 webpack-dev-server</strong>，因为这两个是<code class="language-plaintext highlighter-rouge">@angular-devkit/build-angular</code>的依赖包，在安装<code class="language-plaintext highlighter-rouge">@angular-devkit/build-angular</code>会自动安装 webpack 和 webpack-dev-server。</p>

<p>需要注意的是，就算在初始化的<code class="language-plaintext highlighter-rouge">package.json</code>中已经有<code class="language-plaintext highlighter-rouge">@angular-devkit/build-angular</code>，还是需要手动再运行一次命令行：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install @angular-devkit/build-angular --save-dev
</code></pre></div></div>
<p>否则在<code class="language-plaintext highlighter-rouge">ng serve</code>运行项目的时候，可能会看到类似下面的错误：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>14% building modules......
Error: No module factory available for dependency type: ContextElementDependency
......
</code></pre></div></div>
<p>该错误表明本地有多个版本的 webpack，把<code class="language-plaintext highlighter-rouge">package.json</code>文件里的 webpack 去掉，单独再安装<code class="language-plaintext highlighter-rouge">@angular-devkit/build-angular</code>就可以了。</p>

<h2 id="更改-angularjson-中的配置">更改 angular.json 中的配置</h2>

<p>因为我们想要，在用 angular-cli 的前提下，可以把我们自己新加的客户化 webpack 配置加进去，可以实现效果：</p>

<p><strong>运行命令行 ng server 或者 ng build 的时候，可以结合已有内置 webpack 配置和新加的客户化 webpack 配置进行打包编译。</strong></p>

<p>所以需要更改 angular.json 中的配置，比如我们需要把客户化的 webpack 配置，加在运行（serve）和编译（build）命令里，那么关键的配置如下：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">   </span><span class="err">......</span><span class="w">
    </span><span class="nl">"architect"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="err">......</span><span class="w">
        </span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"builder"</span><span class="p">:</span><span class="w"> </span><span class="s2">"@angular-builders/custom-webpack:browser"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"options"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"customWebpackConfig"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./webpack.config.js"</span><span class="w">
                </span><span class="p">}</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="nl">"serve"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"builder"</span><span class="p">:</span><span class="w"> </span><span class="s2">"@angular-builders/custom-webpack:dev-server"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"options"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"customWebpackConfig"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./webpack.config.js"</span><span class="w">
                </span><span class="p">}</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<blockquote>
<p>
如果 unit test 也需要加自己的客户化 webpack 配置，可以加在对应 test 那个节点下。
</p>
</blockquote>
<p>customWebpackConfig 节点下的 path 就是指的我们需要新加的客户化 webpack 配置文件，然后再项目根目录下新加一个新的 webpack.config.js 文件，把项目里需要新加的一些 webpack 配置加在这个文件里就可以了。比如在示例项目里加了 copy-webpack-plugin 在编译过程中拷贝文件和 webpack-bundle-analyzer 用来编译打包好以后分析每个 bundle 文件内容，代码如下：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">webpack</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">pkg</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./package.json</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">path</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">CopyPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">copy-webpack-plugin</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">BundleAnalyzerPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">webpack-bundle-analyzer</span><span class="dl">'</span><span class="p">).</span><span class="nx">BundleAnalyzerPlugin</span><span class="p">;</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">config</span><span class="p">.</span><span class="nx">plugins</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span>
    <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">DefinePlugin</span><span class="p">({</span>
      <span class="dl">'</span><span class="s1">APP_VERSION</span><span class="dl">'</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">pkg</span><span class="p">.</span><span class="nx">version</span><span class="p">),</span>
    <span class="p">}),</span>
    <span class="k">new</span> <span class="nx">BundleAnalyzerPlugin</span><span class="p">(),</span>
    <span class="k">new</span> <span class="nx">CopyPlugin</span><span class="p">([</span>
      <span class="p">{</span> <span class="na">from</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="dl">"</span><span class="s2">moackdata</span><span class="dl">"</span><span class="p">),</span> <span class="na">to</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="dl">"</span><span class="s2">dist/angular-performance/moackdata</span><span class="dl">"</span><span class="p">)</span> <span class="p">}</span>
    <span class="p">])</span>
  <span class="p">);</span>

  <span class="k">return</span> <span class="nx">config</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<blockquote>
<p>
新加的客户化 webpack 文件不一定要命名为 webpack.config.js，可以随意命名。而且可以在 serve/build/test 命令里添加各自不同的 webpack 配置文件，满足开发/发布/测试不同的配置需求。
</p>
</blockquote>

<p>在做好以上的配置以后，运行<code class="language-plaintext highlighter-rouge">ng serve</code>或者<code class="language-plaintext highlighter-rouge">ng build</code>可以看到运行的结果是合并了 Angular 内置 webpack 和我们新加的客户化 webpack 配置。</p>

<h2 id="这么配置的优势是什么">这么配置的优势是什么？</h2>

<p>angular-cli 内置的 webpack 配置，我们通过<code class="language-plaintext highlighter-rouge">ng build --aot=true</code> 或者<code class="language-plaintext highlighter-rouge">ng build --prod</code>可以做 AoT 编译和 tree-shaking，从而可以优化整个 Angular 应用的性能。</p>

<p>因为内置 webpack 配置，开发没办法根据实际项目需求加一些内置 webpack 没有的 loader 或者 plugin，在 Angular6.0 以前的版本都是通过<code class="language-plaintext highlighter-rouge">ng eject</code>把内置 webpack 暴露出来，大多数开发根据自己项目需求重写整个 webpack 配置，那么同时也需要花额外的精力配合 webpack 去实现 Angular AoT 编译和 tree-shaking 功能。</p>

<p>在 Angular6.0 以上的版本，去掉<code class="language-plaintext highlighter-rouge">ng eject</code>，保留 angular-cli（AoT 编译和 tree-shaking），并通过【<a href="https://github.com/just-jeb/angular-builders">angular-builders</a>】满足开发客户化 webpack 配置需求。这么做的优势有：</p>
<ol>
  <li>开发人员可以用最少的时间和精力，同时兼顾性能（AoT/tree-shaking）和项目特殊 loader/plugin 需求。</li>
  <li>不需要额外用 awesome-typescript-loader 来编译 typescript</li>
  <li>不需要额外用 angular-router-loader 来实现 lazy loading</li>
  <li>默认是 Production mode</li>
  <li>默认是 Minification</li>
  <li>默认是 Uglification</li>
  <li>等等…..</li>
</ol>

<blockquote>
<p>
对于 Angular6 以上的版本， typescript 编译（tsc）、Sass/Less 编译成 CSS、bundle 打包 JavaScript/CSS 、Code splitting、根据路由切割代码到不同的 chunk 文件，这些功能都是在 @ngtools/webpack 里实现的，@ngtools/webpack 的代码一般放在 @angular/cli 里。
</p>
</blockquote>
:ET