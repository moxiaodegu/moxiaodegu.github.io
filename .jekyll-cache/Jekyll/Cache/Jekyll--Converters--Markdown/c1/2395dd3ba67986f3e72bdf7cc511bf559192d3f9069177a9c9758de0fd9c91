I"^j<p>webpack把 ts js html css imgs等文件都统统打包成bundle.js文件，只知道所有静态文件都在bundle文件里，但是具体bundle里面有什么呢？</p>

<h2 id="一个文件ajs一个入口文件生成一个bundle文件">一个文件：a.js，一个入口文件，生成一个bundle文件</h2>

<p>源码在这里：<a href="https://github.com/LiMeii/angular-seed-project">angular-seed-project</a>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// a.js</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">this is a.js file</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// webpack.bundle.js</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./src/app/bundle/a.js</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">path</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="dl">'</span><span class="s1">../build-bundle</span><span class="dl">'</span><span class="p">),</span>
        <span class="na">filename</span><span class="p">:</span> <span class="dl">'</span><span class="s1">js/[name].bundle.js</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
        <span class="k">new</span> <span class="nx">CleanWebpackPlugin</span><span class="p">([</span><span class="dl">'</span><span class="s1">./build-bundle</span><span class="dl">'</span><span class="p">],</span> <span class="p">{</span> <span class="na">root</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">(),</span> <span class="dl">''</span><span class="p">)</span> <span class="p">})</span>
    <span class="p">]</span>
<span class="p">};</span>
</code></pre></div></div>
<p>最终生成的 a.bundle.js 文件如下：</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//a.bundle.js</span>

<span class="cm">/******/</span> <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">modules</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// webpackBootstrap</span>
<span class="cm">/******/</span> 	<span class="c1">// The module cache</span>
<span class="cm">/******/</span> 	<span class="kd">var</span> <span class="nx">installedModules</span> <span class="o">=</span> <span class="p">{};</span>
<span class="cm">/******/</span>
<span class="cm">/******/</span> 	<span class="c1">// The require function</span>
<span class="cm">/******/</span> 	<span class="kd">function</span> <span class="nx">__webpack_require__</span><span class="p">(</span><span class="nx">moduleId</span><span class="p">)</span> <span class="p">{</span>
<span class="cm">/******/</span>
<span class="cm">/******/</span> 		<span class="c1">// Check if module is in cache</span>
<span class="cm">/******/</span> 		<span class="k">if</span> <span class="p">(</span><span class="nx">installedModules</span><span class="p">[</span><span class="nx">moduleId</span><span class="p">])</span> <span class="p">{</span>
<span class="cm">/******/</span> 			<span class="k">return</span> <span class="nx">installedModules</span><span class="p">[</span><span class="nx">moduleId</span><span class="p">].</span><span class="nx">exports</span><span class="p">;</span>
            <span class="cm">/******/</span>
<span class="p">}</span>
<span class="cm">/******/</span> 		<span class="c1">// Create a new module (and put it into the cache)</span>
<span class="cm">/******/</span> 		<span class="kd">var</span> <span class="nx">module</span> <span class="o">=</span> <span class="nx">installedModules</span><span class="p">[</span><span class="nx">moduleId</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
<span class="cm">/******/</span> 			<span class="na">i</span><span class="p">:</span> <span class="nx">moduleId</span><span class="p">,</span>
<span class="cm">/******/</span> 			<span class="na">l</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
<span class="cm">/******/</span> 			<span class="na">exports</span><span class="p">:</span> <span class="p">{}</span>
            <span class="cm">/******/</span>
<span class="p">};</span>
<span class="cm">/******/</span>
<span class="cm">/******/</span> 		<span class="c1">// Execute the module function</span>
<span class="cm">/******/</span> 		<span class="nx">modules</span><span class="p">[</span><span class="nx">moduleId</span><span class="p">].</span><span class="nx">call</span><span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">,</span> <span class="nx">module</span><span class="p">,</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">,</span> <span class="nx">__webpack_require__</span><span class="p">);</span>
<span class="cm">/******/</span>
<span class="cm">/******/</span> 		<span class="c1">// Flag the module as loaded</span>
<span class="cm">/******/</span> 		<span class="nx">module</span><span class="p">.</span><span class="nx">l</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="cm">/******/</span>
<span class="cm">/******/</span> 		<span class="c1">// Return the exports of the module</span>
<span class="cm">/******/</span> 		<span class="k">return</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">;</span>
        <span class="cm">/******/</span>
<span class="p">}</span>
<span class="cm">/******/</span>
<span class="cm">/******/</span>
<span class="cm">/******/</span> 	<span class="c1">// expose the modules object (__webpack_modules__)</span>
<span class="cm">/******/</span> 	<span class="nx">__webpack_require__</span><span class="p">.</span><span class="nx">m</span> <span class="o">=</span> <span class="nx">modules</span><span class="p">;</span>
<span class="cm">/******/</span>
<span class="cm">/******/</span> 	<span class="c1">// expose the module cache</span>
<span class="cm">/******/</span> 	<span class="nx">__webpack_require__</span><span class="p">.</span><span class="nx">c</span> <span class="o">=</span> <span class="nx">installedModules</span><span class="p">;</span>
<span class="cm">/******/</span>
<span class="cm">/******/</span> 	<span class="c1">// define getter function for harmony exports</span>
<span class="cm">/******/</span> 	<span class="nx">__webpack_require__</span><span class="p">.</span><span class="nx">d</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">exports</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">getter</span><span class="p">)</span> <span class="p">{</span>
<span class="cm">/******/</span> 		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">__webpack_require__</span><span class="p">.</span><span class="nx">o</span><span class="p">(</span><span class="nx">exports</span><span class="p">,</span> <span class="nx">name</span><span class="p">))</span> <span class="p">{</span>
<span class="cm">/******/</span> 			<span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">exports</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="p">{</span>
<span class="cm">/******/</span> 				<span class="na">configurable</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
<span class="cm">/******/</span> 				<span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
<span class="cm">/******/</span> 				<span class="na">get</span><span class="p">:</span> <span class="nx">getter</span>
    <span class="cm">/******/</span>
<span class="p">});</span>
            <span class="cm">/******/</span>
<span class="p">}</span>
        <span class="cm">/******/</span>
<span class="p">};</span>
<span class="cm">/******/</span>
<span class="cm">/******/</span> 	<span class="c1">// getDefaultExport function for compatibility with non-harmony modules</span>
<span class="cm">/******/</span> 	<span class="nx">__webpack_require__</span><span class="p">.</span><span class="nx">n</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">module</span><span class="p">)</span> <span class="p">{</span>
<span class="cm">/******/</span> 		<span class="kd">var</span> <span class="nx">getter</span> <span class="o">=</span> <span class="nx">module</span> <span class="o">&amp;&amp;</span> <span class="nx">module</span><span class="p">.</span><span class="nx">__esModule</span> <span class="p">?</span>
<span class="cm">/******/</span> 			<span class="kd">function</span> <span class="nx">getDefault</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">module</span><span class="p">[</span><span class="dl">'</span><span class="s1">default</span><span class="dl">'</span><span class="p">];</span> <span class="p">}</span> <span class="p">:</span>
<span class="cm">/******/</span> 			<span class="kd">function</span> <span class="nx">getModuleExports</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">module</span><span class="p">;</span> <span class="p">};</span>
<span class="cm">/******/</span> 		<span class="nx">__webpack_require__</span><span class="p">.</span><span class="nx">d</span><span class="p">(</span><span class="nx">getter</span><span class="p">,</span> <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">,</span> <span class="nx">getter</span><span class="p">);</span>
<span class="cm">/******/</span> 		<span class="k">return</span> <span class="nx">getter</span><span class="p">;</span>
        <span class="cm">/******/</span>
<span class="p">};</span>
<span class="cm">/******/</span>
<span class="cm">/******/</span> 	<span class="c1">// Object.prototype.hasOwnProperty.call</span>
<span class="cm">/******/</span> 	<span class="nx">__webpack_require__</span><span class="p">.</span><span class="nx">o</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">object</span><span class="p">,</span> <span class="nx">property</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">object</span><span class="p">,</span> <span class="nx">property</span><span class="p">);</span> <span class="p">};</span>
<span class="cm">/******/</span>
<span class="cm">/******/</span> 	<span class="c1">// __webpack_public_path__</span>
<span class="cm">/******/</span> 	<span class="nx">__webpack_require__</span><span class="p">.</span><span class="nx">p</span> <span class="o">=</span> <span class="dl">""</span><span class="p">;</span>
<span class="cm">/******/</span>
<span class="cm">/******/</span> 	<span class="c1">// Load entry module and return exports</span>
<span class="cm">/******/</span> 	<span class="k">return</span> <span class="nx">__webpack_require__</span><span class="p">(</span><span class="nx">__webpack_require__</span><span class="p">.</span><span class="nx">s</span> <span class="o">=</span> <span class="mi">0</span><span class="p">);</span>
    <span class="cm">/******/</span>
<span class="p">})</span>
<span class="cm">/************************************************************************/</span>
<span class="cm">/******/</span><span class="p">([</span>
<span class="cm">/* 0 */</span>
<span class="cm">/***/</span> <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">module</span><span class="p">,</span> <span class="nx">exports</span><span class="p">)</span> <span class="p">{</span>

        <span class="c1">// this is use to analyse what's in bundle file</span>

        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">this is a.js file</span><span class="dl">'</span><span class="p">);</span>

        <span class="cm">/***/</span>
<span class="p">})</span>
<span class="cm">/******/</span><span class="p">]);</span>

</code></pre></div></div>

<blockquote>
<p>
1. 从最后的bundle文件可以看出来，整个bundle文件是一个自执行表达式，传入参数是一个数组，数组里有一个funciton，这个function里面包含了a.js里面的内容。
</p>
<p>
2. webpack打包以后，每个模块都有一个独一无二的id，0 1 2 3......其实就是自执行表达式传入参数数组的索引。
</p>
<p>
3. 在这个自执行表达式中有一个闭包，__webpack_require__是模块加载函数，通过模块id找到对应模块，加载过的模块会放入cache中，下次就直接从cache调用不用重复加载。
</p>
</blockquote>

<p>是不是很简单，所有模块都以参数数组的形式传入到自执行表达式中。</p>

<h2 id="两个文件ajs和bjs两个入口文件打包成两个bundle文件">两个文件：a.js和b.js，两个入口文件，打包成两个bundle文件</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//a.js</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">this is a.js file</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//b.js</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">this is b.js file</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//webpack.bundle.js</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./src/app/bundle/a.js</span><span class="dl">'</span><span class="p">,</span>
        <span class="dl">'</span><span class="s1">b</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./src/app/bundle/b.js</span><span class="dl">'</span>
    <span class="p">},</span>

    <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">path</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="dl">'</span><span class="s1">../build-bundle</span><span class="dl">'</span><span class="p">),</span>
        <span class="na">filename</span><span class="p">:</span> <span class="dl">'</span><span class="s1">js/[name].bundle.js</span><span class="dl">'</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>
<p>最后编译的bundle文件有两个，a.budnle.js和b.bundle.js，从下面代码可以看出来moduleid是唯一不会重复的。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//a.bundle.js</span>
<span class="cm">/******/</span> <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">modules</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// webpackBootstrap</span>
<span class="cm">/******/</span> 	<span class="c1">// 省略重复代码</span>
<span class="cm">/******/</span> 	<span class="c1">// Load entry module and return exports</span>
<span class="cm">/******/</span> 	<span class="k">return</span> <span class="nx">__webpack_require__</span><span class="p">(</span><span class="nx">__webpack_require__</span><span class="p">.</span><span class="nx">s</span> <span class="o">=</span> <span class="mi">0</span><span class="p">);</span>
<span class="cm">/******/</span> <span class="p">})</span>
<span class="cm">/************************************************************************/</span>
<span class="cm">/******/</span> <span class="p">([</span>
<span class="cm">/* 0 */</span>
<span class="cm">/***/</span> <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">module</span><span class="p">,</span> <span class="nx">exports</span><span class="p">)</span> <span class="p">{</span>

<span class="c1">// this is use to analyse what's in bundle file</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">this is a.js file</span><span class="dl">'</span><span class="p">);</span>

<span class="cm">/***/</span> <span class="p">})</span>
<span class="cm">/******/</span> <span class="p">]);</span>

</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//b.bundle.js</span>
<span class="cm">/******/</span> <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">modules</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// webpackBootstrap</span>
<span class="cm">/******/</span> 	<span class="c1">// 省略重复代码</span>
<span class="cm">/******/</span> 	<span class="c1">// Load entry module and return exports</span>
<span class="cm">/******/</span> 	<span class="k">return</span> <span class="nx">__webpack_require__</span><span class="p">(</span><span class="nx">__webpack_require__</span><span class="p">.</span><span class="nx">s</span> <span class="o">=</span> <span class="mi">1</span><span class="p">);</span>
    <span class="cm">/******/</span>
<span class="p">})</span>
<span class="cm">/************************************************************************/</span>
<span class="cm">/******/</span><span class="p">([</span>
<span class="cm">/* 0 */</span><span class="p">,</span>
<span class="cm">/* 1 */</span>
<span class="cm">/***/</span> <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">module</span><span class="p">,</span> <span class="nx">exports</span><span class="p">)</span> <span class="p">{</span>

        <span class="c1">// this is use to analyse what's in bundle file</span>

        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">this is b.js file</span><span class="dl">'</span><span class="p">);</span>

        <span class="cm">/***/</span>
<span class="p">})</span>
<span class="cm">/******/</span><span class="p">]);</span>
</code></pre></div></div>

<h2 id="两个文件ajs和bjsa引用b文件一个入口生成一个bundle文件">两个文件：a.js和b.js，a引用b文件，一个入口，生成一个bundle文件</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//a.js</span>
<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./b.js</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">this is a.js file</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">b</span><span class="p">.</span><span class="nx">b</span><span class="p">();</span>
</code></pre></div></div>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//b.js</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">this is b.js file</span><span class="dl">'</span><span class="p">)</span>
<span class="p">};</span>
</code></pre></div></div>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//webpack.bundle.js</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./src/app/bundle/a.js</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">path</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="dl">'</span><span class="s1">../build-bundle</span><span class="dl">'</span><span class="p">),</span>
        <span class="na">filename</span><span class="p">:</span> <span class="dl">'</span><span class="s1">js/[name].bundle.js</span><span class="dl">'</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>最终生成的一个a.bundle.js，从以下代码中可以看出，自执行函数的传入参数数组变成了两个，分别对应a.js b.js的内容，不同的是a对b的引用变成了：var b = <strong>webpack_require</strong>(1);</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//a.bundle.js</span>
<span class="cm">/******/</span> <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">modules</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// webpackBootstrap</span>
<span class="cm">/******/</span> 	<span class="c1">// 省略重复代码</span>
<span class="cm">/******/</span>
<span class="cm">/******/</span> 	<span class="c1">// Load entry module and return exports</span>
<span class="cm">/******/</span> 	<span class="k">return</span> <span class="nx">__webpack_require__</span><span class="p">(</span><span class="nx">__webpack_require__</span><span class="p">.</span><span class="nx">s</span> <span class="o">=</span> <span class="mi">0</span><span class="p">);</span>
    <span class="cm">/******/</span>
<span class="p">})</span>
<span class="cm">/************************************************************************/</span>
<span class="cm">/******/</span><span class="p">([</span>
<span class="cm">/* 0 */</span>
<span class="cm">/***/</span> <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">module</span><span class="p">,</span> <span class="nx">exports</span><span class="p">,</span> <span class="nx">__webpack_require__</span><span class="p">)</span> <span class="p">{</span>

        <span class="c1">// this is use to analyse what's in bundle file</span>

        <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">__webpack_require__</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>

        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">this is a.js file</span><span class="dl">'</span><span class="p">);</span>

        <span class="nx">b</span><span class="p">.</span><span class="nx">b</span><span class="p">();</span>

        <span class="cm">/***/</span>
<span class="p">}),</span>
<span class="cm">/* 1 */</span>
<span class="cm">/***/</span> <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">module</span><span class="p">,</span> <span class="nx">exports</span><span class="p">)</span> <span class="p">{</span>

        <span class="c1">// this is use to analyse what's in bundle file</span>
        <span class="nx">exports</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">this is b.js file</span><span class="dl">'</span><span class="p">)</span>
        <span class="p">};</span>

        <span class="cm">/***/</span>
<span class="p">})</span>
<span class="cm">/******/</span><span class="p">]);</span>
</code></pre></div></div>

<p>以上就是最后bundle文件里的具体内容，但是这样这样打包会有以下问题：</p>
<blockquote>
<p>
如果多个文件a.js、b.js 、c.js、d.js，
a、b、c 文件同时引用了d文件，
入口文件为a、b、c, 那么d就会被重复打包到a.bundle.js、b.bundle.js、c.bundle.js ，会有代码冗余。
</p>
</blockquote>
<p>【<a href="/2018/10/webpack-code-splitting">webpack 代码切割</a>】这篇文章介绍了如何解决上述问题。</p>
:ET